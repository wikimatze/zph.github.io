<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Civet]]></title>
  <link href="http://zph.github.io/atom.xml" rel="self"/>
  <link href="http://zph.github.io/"/>
  <updated>2014-02-12T18:07:23-05:00</updated>
  <id>http://zph.github.io/</id>
  <author>
    <name><![CDATA[Zander]]></name>
    <email><![CDATA[zander@civet.ws]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automating Email with Ruby]]></title>
    <link href="http://zph.github.io/2014/02/automating-email-with-ruby/"/>
    <updated>2014-02-09T20:28:00-05:00</updated>
    <id>http://zph.github.io/2014/02/automating-email-with-ruby</id>
    <content type="html"><![CDATA[<p>Last Friday was the kind of day where I dropped into a Pry repl in order to bang out an automation script.</p>

<p>The challenge was: automate the retrival of specific emails that contained receipts, wrangle them into sane data structures, and dump them into a spreadsheet with both daily totals and an absolute total.</p>

<p>An example email looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Receipt #9999999999999
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> County:Example, FL      Date: 2014-1-27 
</span><span class='line'>
</span><span class='line'> Name:Jill Doe
</span><span class='line'> Credit Card #XXXXXXXXXXXX9999
</span><span class='line'> Authorization code:999999
</span><span class='line'>
</span><span class='line'> No.of Pages viewed:3
</span><span class='line'> Total Amount: $ 3.00
</span><span class='line'>
</span><span class='line'> Thank you for visiting http://www.example.com  </span></code></pre></td></tr></table></div></figure>


<p>First step was to build an email parser for this format.  I tried to keep it tolerant of future changes to the email generation scheme.</p>

<p>The general steps involved are:
1. Split the body linewise
2. Create a method for each piece of content to extract.
3. From the collection of lines, grep for the line with appropriate unique text.
4. Then in that line, use a regex to find the specific portion of data.</p>

<p>The full code for that module is listed below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Email</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Parser</span>
</span><span class='line'>      <span class="kp">attr_accessor</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:content</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@raw_content</span> <span class="o">=</span> <span class="n">email</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>        <span class="vi">@content</span> <span class="o">=</span> <span class="vi">@raw_content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:strip</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">receipt</span>
</span><span class='line'>        <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/receipt/i</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="sr">/\d+/</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">county_line</span>
</span><span class='line'>        <span class="vi">@county_line</span> <span class="o">||=</span> <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/county.*date/i</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>                                <span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\W{3,}/</span><span class="p">)</span>
</span><span class='line'>                                <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="no">Hash</span><span class="o">[*</span><span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:strip</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">county</span>
</span><span class='line'>        <span class="n">county_line</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s2">&quot;County&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">date</span>
</span><span class='line'>        <span class="n">county_line</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="s2">&quot;Date&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>        <span class="n">array</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/name/i</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">credit_card_number</span>
</span><span class='line'>        <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/credit card/i</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="sr">/#.*$/</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">authorization_code</span>
</span><span class='line'>        <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/authorization code/i</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">pages_viewed</span>
</span><span class='line'>        <span class="k">begin</span>
</span><span class='line'>          <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/pages viewed/i</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="sr">/\d+/</span><span class="o">].</span><span class="n">strip</span>
</span><span class='line'>        <span class="k">rescue</span> <span class="no">NoMethodError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>          <span class="nb">warn</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2"> for </span><span class="si">#{</span><span class="n">content</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">total_amount</span>
</span><span class='line'>        <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/total amount/i</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>                                     <span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>                                     <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                                     <span class="o">.</span><span class="n">strip</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">website</span>
</span><span class='line'>        <span class="n">content</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/visiting http/i</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="sr">/http.*$/i</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">all</span>
</span><span class='line'>        <span class="no">ParsingPresenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>          <span class="ss">county</span><span class="p">:</span> <span class="n">county</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">date</span><span class="p">:</span> <span class="n">date</span><span class="p">,</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>          <span class="n">credit_card_number</span><span class="p">:</span> <span class="n">credit_card_number</span><span class="p">,</span>
</span><span class='line'>          <span class="n">authorization_code</span><span class="p">:</span> <span class="n">authorization_code</span><span class="p">,</span>
</span><span class='line'>          <span class="n">pages_viewed</span><span class="p">:</span> <span class="n">pages_viewed</span><span class="p">,</span>
</span><span class='line'>          <span class="n">total_amount</span><span class="p">:</span> <span class="n">total_amount</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">website</span><span class="p">:</span> <span class="n">website</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">receipt</span><span class="p">:</span> <span class="n">receipt</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">all</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ps</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">ParsingPresenter</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">OpenStruct</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that in order, I set about using the awesome <code>ruby-gmail</code> gem for retrieving said emails. Note: after completing this project, I learned of a continuation of the <code>ruby-gmail</code> gem called <code>gmail</code>.  All the code in these examples is specific to the older incarnation of the gem.</p>

<p><code>ruby-gmail</code> has a simple interface for retrieving messages between date ranges.  So I setup a specific Gmail filter for emails from a certain sender that included the text &lsquo;receipt&rsquo;.</p>

<p>There&rsquo;s nothing too fancy in this code, but it&rsquo;s important to set <code>@gmail.peek = true</code> so that programatically viewed emails aren&rsquo;t marked &lsquo;read&rsquo;.  Also of note is the use of Dotenv for setting secret values without risking them in a git repo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">Retriever</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">USER</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GMAIL_USER&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="no">PASSWORD</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GMAIL_PASSWORD&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="no">LABEL</span> <span class="o">=</span> <span class="s1">&#39;Receipts&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kp">attr_accessor</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:gmail</span><span class="p">,</span> <span class="ss">:messages</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="no">USER</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="no">PASSWORD</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>        <span class="vi">@password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>        <span class="vi">@gmail</span> <span class="o">=</span> <span class="no">Gmail</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@user</span><span class="p">,</span> <span class="vi">@password</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@gmail</span><span class="o">.</span><span class="n">peek</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">message_count_in_range</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span> <span class="n">end_date</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">#dates as &#39;2010-02-10&#39;</span>
</span><span class='line'>        <span class="n">gmail</span><span class="o">.</span><span class="n">inbox</span>
</span><span class='line'>             <span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="ss">:after</span> <span class="o">=&gt;</span> <span class="n">start_date</span><span class="p">,</span> <span class="ss">:before</span> <span class="o">=&gt;</span> <span class="n">end_date</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">emails_in_range</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span> <span class="n">end_date</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="no">LABEL</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">#dates as &#39;2010-02-10&#39;</span>
</span><span class='line'>        <span class="n">gmail</span><span class="o">.</span><span class="n">mailbox</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>             <span class="o">.</span><span class="n">emails</span><span class="p">(</span><span class="ss">:after</span> <span class="o">=&gt;</span> <span class="n">start_date</span><span class="p">,</span> <span class="ss">:before</span> <span class="o">=&gt;</span> <span class="n">end_date</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">message_presenters_in_range</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span> <span class="n">end_date</span><span class="p">)</span>
</span><span class='line'>        <span class="n">msgs</span> <span class="o">=</span> <span class="n">emails_in_range</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span> <span class="n">end_date</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@messages</span> <span class="o">=</span> <span class="n">msgs</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>          <span class="no">Presenter</span><span class="o">.</span><span class="n">present</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Presenter</span>
</span><span class='line'>      <span class="kp">attr_accessor</span> <span class="ss">:email</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@email</span> <span class="o">=</span> <span class="n">msg</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">body</span>
</span><span class='line'>        <span class="n">email</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">date</span>
</span><span class='line'>        <span class="n">email</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">to_date</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">date_string</span>
</span><span class='line'>        <span class="n">date</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>        <span class="n">presenter</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Message</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">date</span><span class="p">:</span> <span class="n">presenter</span><span class="o">.</span><span class="n">date_string</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">presenter</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Message</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">OpenStruct</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last task in building this tool was dumping the data to a CSV with totals by date as well as a grand total. The process is simple, pass in a collection of messages and iterate through them by date, add a subtotal per date, then add a final row with grand total.</p>

<p>I like to break out rows into their own methods when possible.  In fact, were I to rewrite this code, the message row would have its own method to clean up the inner loop of <code>messages_by_date()</code>.  Another trick that helped for testing was to not generate a file on the filesystem.  <code>CSV</code> takes either an <code>open</code> or a <code>generate</code> method.  With <code>generate</code> it will pass the complete csv file out as the return value!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CSVBuilder</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">:csv</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@messages</span> <span class="o">=</span> <span class="n">messages</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="vi">@csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">generate</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
</span><span class='line'>        <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="n">header</span>
</span><span class='line'>        <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="n">empty_row</span>
</span><span class='line'>        <span class="n">uniq_dates</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">date</span><span class="o">|</span>
</span><span class='line'>          <span class="n">messages_by_date</span><span class="p">(</span><span class="n">date</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>            <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">msg</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">receipt</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">authorization_code</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">pages_viewed</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">credit_card_number</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">total_amount</span><span class="o">]</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="n">sum_totals_row</span><span class="p">(</span><span class="n">messages_by_date</span><span class="p">(</span><span class="n">date</span><span class="p">),</span> <span class="s2">&quot;Subtotal for </span><span class="si">#{</span><span class="n">date</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="n">empty_row</span>
</span><span class='line'>        <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="n">sum_totals_row</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="s2">&quot;Total Amount&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">header</span>
</span><span class='line'>      <span class="o">[</span><span class="s1">&#39;Date&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="s1">&#39;Receipt #&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="s1">&#39;Authorization Code&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="s1">&#39;Pages Viewed&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="s1">&#39;Name&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="s1">&#39;Credit Card #&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="s1">&#39;Total Amount&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">empty_row</span>
</span><span class='line'>      <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">header</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">messages_by_date</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>      <span class="n">messages</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="o">.</span><span class="n">date</span> <span class="o">==</span> <span class="n">date</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">uniq_dates</span>
</span><span class='line'>      <span class="n">messages</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:date</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum_totals_row</span><span class="p">(</span><span class="n">msgs</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rawsum</span> <span class="o">=</span> <span class="n">msgs</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="o">.</span><span class="n">total_amount</span><span class="o">.</span><span class="n">to_f</span> <span class="p">}</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span> <span class="s2">&quot;%.2f&quot;</span><span class="p">,</span> <span class="n">rawsum</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">sum_row_padding</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">header</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sum_row</span> <span class="o">=</span> <span class="o">[</span> <span class="n">sum_row_padding</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">sum</span> <span class="o">].</span><span class="n">flatten</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m also quite proud of the variable name <code>rawsum</code> because it&rsquo;s rawsome to design code that will save a couple hours every two weeks.</p>

<p>With a good ecosystem of libraries, it&rsquo;s only a couple hours of work to write a re-usable tool that saves significant amounts of time. Hooray :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures with MRI 2.0.0 and Zlib: A Story of Malformed Gzips]]></title>
    <link href="http://zph.github.io/2013/06/adventures-with-mri-2-dot-0-0-and-zlib-a-story-of-malformed-gzips/"/>
    <updated>2013-06-20T00:42:00-04:00</updated>
    <id>http://zph.github.io/2013/06/adventures-with-mri-2-dot-0-0-and-zlib-a-story-of-malformed-gzips</id>
    <content type="html"><![CDATA[<p>It started off as a casual inquiry on Twitter:</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/geopet">@geopet</a> Sounds strange that 193 would work for external API and not 2.0.. can you share what you’re working on? Or TDD test via webmock?</p>&mdash; Zander (@_ZPH) <a href="https://twitter.com/_ZPH/statuses/345536278604963841">June 14, 2013</a></blockquote>


<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>And led to my friend @geopet posting the Minimum Viable Demo as a Gist:</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/Strabd">@Strabd</a> <a href="https://twitter.com/_ZPH">@_ZPH</a> But here’s the gist with the code and the results: <a href="https://t.co/ajiAh8lQTN">https://t.co/ajiAh8lQTN</a></p>&mdash; Geoff Petrie (@geopet) <a href="https://twitter.com/geopet/statuses/345567430841597952">June 14, 2013</a></blockquote>


<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>And it was interesting</h2>

<p>What we found out was that the Ruby open-uri library would make calls to an external API (Wunderground) and throw a Zlib::DataError when run in MRI Ruby 2.0.0.  The strange thing was that MRI 1.9.3 works perfectly fine.  Same exact story when the GET Request comes from Net/HTTP instead of open-uri.  But it succeeds on 2.0.0 when using the RestClient Gem, as documented by @injekt.</p>

<h2>The Gloves Come Off</h2>

<p>We dove into the source of the error and determined that it was thrown from <code>net/http/response.rb:357</code>.  In order to better understand the error, I sequentially placed <code>binding.pry</code> statements to determine where the error percolated to the surface.  It was the call to <code>@inflate.finish</code> which was where the Zlib::DataError surfaced.</p>

<p>I left the code at this point and posted my initial findings back to Geoff and left the project alone.</p>

<h2>Today</h2>

<p>Then I saw this message and it was time for more digging :).</p>

<blockquote class="twitter-tweet"><p>Big thanks to <a href="https://twitter.com/_ZPH">@_ZPH</a> &amp; <a href="https://twitter.com/lee_jarvis">@lee_jarvis</a> for helping out with my 1.9.3/2.0 question. The discussion has led to more questions, but it’s a start!</p>&mdash; Geoff Petrie (@geopet) <a href="https://twitter.com/geopet/statuses/347460923130269696">June 19, 2013</a></blockquote>


<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I started by forking his Gist and pulling it down to my local computer. My first phase of troubleshooting was to try alternate tools, in order to see how they dump the HTTP response.  Good ol&#8217; <code>curl</code> came to the rescue and provided me with the results that I placed in <a href="https://github.com/zph/mri_2_0_0_zlib_troubleshooting/blob/master/curl_response.txt">curl_response.txt</a> and <a href="https://github.com/zph/mri_2_0_0_zlib_troubleshooting/blob/master/curl_raw.txt">curl_raw.txt</a>.  Notice the rather interesting artifact around line 12 on the RAW version that isn&rsquo;t present in the alternate curl response.</p>

<h2>Pulling in Net/HTTP</h2>

<p>It felt like progress and I wanted a better way to tweak the net/http library.  I prepended the local directory to Ruby&rsquo;s LOAD_PATH and copies the net folder out from MRI&rsquo;s lib directory.  Having the <code>Dir.pwd</code> prepended to the path enabled me to make very convenient testing tweaks to the Ruby Standard Library without needing to alter my standard RVM install :).</p>

<h2>Tapping the Sockets</h2>

<p>With net/http libs loaded from the local file, I was off to the races. I tapped into the internal workings by using the &lsquo;sack&rsquo; utility <a href="https://github.com/zph/sack">sack</a> for jumping directly into and editing <code>ack</code> results.  With the addition of a strategically placed <code>binding.pry</code>, I was able to tap into the live socket info via a <code>socket.read_all</code> and write that out as a binary dump to <code>socket_content.bin</code>.</p>

<h2>Reducing it to Elements</h2>

<p>The last step in my troubleshooting was to create <code>zlib_targeted.rb</code> for isolating the zlib load issues from net/http.  Since the underlying issue appears to be a malformed gzip returned from Wunderground&rsquo;s API, I created zlib_targeted.rb to remove net/http from the equation.  Check out the demo content of the file below:</p>

<script src="https://gist.github.com/a7bfc0acbc0876363ede.js"></script>


<h2>Conclusion</h2>

<p>Now we have a very narrowly tailored set of examples that dig into the exact errors, thanks to @geopet, myself, and @injekt.</p>

<p>For more info, see the comments in this Gist repo from @geopet:
<a href="https://gist.github.com/geopet/5782836">Initial Gist</a></p>

<p>Or my repo that includes the files described in this post:
<a href="https://github.com/zph/mri_2_0_0_zlib_troubleshooting">Full repo</a></p>

<p>I&rsquo;m happy with how the toubleshooting has progressed and would like to see this issue resolved, whether it is a malformed response from Wunderground, intolerant behavior from MRI 2.0.0, or anything else.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't fear pair programming - A Guide to Starting]]></title>
    <link href="http://zph.github.io/2013/06/dont-fear-pair-programming-a-guide-to-starting/"/>
    <updated>2013-06-02T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/06/dont-fear-pair-programming-a-guide-to-starting</id>
    <content type="html"><![CDATA[<p>Pair Programming is becoming a big deal in the Ruby programming world: this guide will help you get started.</p>




<h2>Pre-Reqs:</h2>




<p>General familiarity with Ruby tools (Bundler, Gems, RVM/Rbenv)
Basic commandline comfort</p>




<h2>What is Pairing?</h2>




<p>In its simplest form, pair programming is where a pair of programmers work on a problem using the same computer.</p>




<p>Since I live don&#8217;t live in a technology hub in America, programming in the same physical location is challenging.  Instead, it&#8217;s possible to replicate that experience with both parties in separate locations.</p>




<h2>How Does it Work?</h2>




<p>Setup a video call using Skype, Google Plus, Twelephone.
Both partners connect into a shared machine such as a Virtual Private Server (VPS).
Each partner connects into a shared Tmux session.
Both of the individuals can jointly edit the same files, as if they were present at the same keyboard.</p>




<h2>Setting It Up From Scratch</h2>




<p>Signup with a VPS provider (I&#8217;m currently very happy with <a href="www.digitalocean.com">DigitalOcean</a>)
Boot up a basic 512MB RAM instance in the Linux flavor of your choice. I&#8217;ll use Ubuntu 12.04 x32 for this example.
Once the instance is booted up, let&#8217;s connect and setup basic sane defaults.
Install tmux and vim-nox using the package manager.
Install Ruby using RVM, Rbenv, or Chruby.
Install Tweemux Gem - <code>gem install tweemux</code>
Now that we&#8217;ve laid the groundwork for it, let&#8217;s work on making it available for a partner.</p>




<h2>Inviting a Pair</h2>




<p>When ready to invite a pairing partner, we start by adding a unique user for them.  For convenience, it&#8217;s best to add their username from Github.</p>




<p><code>adduser --disabled-password $PAIRNAME</code></p>




<p>Next we&#8217;ll use the Tweemux Gem from RKing to pull down the partner&#8217;s public key from Github, and add it to their <code>~/.ssh/authorized_keys</code>.</p>




<p><code>tweemux hubkey $PAIRNAME</code></p>




<p>At this point in the process, that user can login to your server using the IP address, their Github username, and their matching private key.</p>




<p>ie - <code>ssh $PAIRNAME@IP_ADDRESS_OF_SERVER</code></p>




<p>At this point, the host should fire up a shared Tmux session:</p>




<p><code>tmux -S /tmp/pair</code></p>




<p>And enable that socket to be world readable:</p>




<p><code>chmod 777 /tmp/pair</code></p>




<p>NOTE: Doing this on anything other than a bare server, or with someone you don&#8217;t trust, isn&#8217;t a secure or a good idea.  Don&#8217;t do this on a production server or with sketchy folks!</p>




<p>Next, it&#8217;s time for the guest to join the shared Tmux session:</p>




<p><code>tmux -S /tmp/pair attach</code></p>




<p>And you&#8217;re both in the same Tmux session!  The view, keyboard and such is all shared =).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting with Vim]]></title>
    <link href="http://zph.github.io/2013/05/starting-with-vim/"/>
    <updated>2013-05-26T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/05/starting-with-vim</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_712&#8221; align=&#8221;alignleft&#8221; width=&#8221;500&#8221;]<a href="http://www.civet.ws/wp-content/uploads/2013/05/8355974382_6063b7935d.jpg"><img src="http://www.civet.ws/wp-content/uploads/2013/05/8355974382_6063b7935d.jpg" alt="" width="500" height="313" class="size-full wp-image-712" /></a> By: <a href='http://www.flickr.com/photos/protocol7/8355974382/' target='_blank'>Niklas Gustavsson</a>[/caption]<p>It&#8217;s been two lovely years with Vim and I&#8217;m <strong>sold</strong>!  Vim&#8217;s the straight edge razor that slices through code.  It&#8217;s like having a finely crafted and personalized lightsaber.</p>

<p>This post is aimed at getting a new Vim user up to speed without cutting off or wanting to sever their hands.</p>

<h2>Getting Started</h2>

<ul>
<li>Use GVim or MacVim (avoid Terminal Vim until more proficient, then generally avoid GUI Vims)</li>
<li>Learn the Vim Modes</li>
<li>Learn survival tactics ala <a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">Progressive Vim</a></li>
<li>Learn to serenade this wild beast called Vim in its own language</li>
<li>Add plugins</li>
</ul>

<p>I&#8217;ll assume that readers of my blog can install GVim or MacVim on their own.  On OSX it&#8217;s as simple as using homebrew.  On Linux, use the awesome package manager of your choice.</p>

<h2>Vim Modes</h2>

<p>Vim is a modal editor.  You have three essential modes of operating:</p>

<ul>
<li>Insert Mode (used for typing)</li>
<li>Visual Mode (used for selecting)</li>
<li>Command Mode (used for executing commands/movements)</li>
</ul>

<p>Having three modes means that the keyboard can have 3x the number of functions because each key can have an alternate meaning in the various modes.  For example, take the letter &#8216;i&#8217;:</p>

<ul>
<li>In command mode, i places the user in insert mode</li>
<li>In insert mode, i types the letter i</li>
<li>in visual mode, it appears not to do anything (I could be wrong, but 10 secs of testing back me up)</li>
</ul>

<p>The first thing to learn is a lesson from Douglas Adams: &#8220;Don&#8217;t Panic!&#8221;.</p>

<p>When lost in Vim or things are going wrong, mash ESC until you&#8217;re back in Command Mode.</p>

<p>When a file gets messed up because you&#8217;re unfamiliar with Vim, type ESC followed by :q! This will quit the file without saving changes (forced quit).  If the changes are important, enter command mode with ESC and type :wq to write the changes to disk.</p>

<p>When you&#8217;re ready to type into the text file, type i to enter insert mode.  At this point, typing will proceed as normal until you hit escape to leave insert mode.</p>

<h2>Pat yourself on the back</h2>

<p>You&#8217;re now as accomplished as I was for my first year of dabbling with Vim!</p>

<p>I didn&#8217;t realize how little of Vim I knew until I saw the surgeon&#8217;s precision with which Gary Bernhardt wielded Vim.  As soon as I saw this I wanted more.</p>

<p>I took his advice and started paying attention to the language of Vim, which largely consists of unmodified alphabet keys and shifted alphabet keys.  Learning some of these has made my typing DRASTICALLY more efficient.  I now feel very little resistance when typing.  It&#8217;s as if my thoughts are able to leap onto the screen without obstacles.  It&#8217;s magic folks!  And you too can cast these spells with enough time and effort.</p>

<p>But mastering Vim (or at least becoming proficient) is a longer topic than I can cover in this post.  So let&#8217;s move on to discuss plugins and the .vimrc.</p>

<h2>Vimrc</h2>

<p>Let&#8217;s get this out of the way: Vim&#8217;s not terribly friendly with the default configuration!</p>

<p>So what&#8217;s the solution? .vimrc and Vim plugins.</p>

<p>The .vimrc file goes in your home directory, ie ~/.vimrc, and dictates Vim&#8217;s configuration.  You can tweak the colorscheme, the timeoutlen, and just about anything from here.  Here&#8217;s an example of what&#8217;s in my own .vimrc:</p>

<script src="https://gist.github.com/db3c4ad77f7a9d27fcaa.js"></script>

<p>Plugins are re-usable Vim code that has grown too large to be included in the Vimrc.  Plugins extend the functionality of Vim and can make it act more like an IDE.  There&#8217;s currently a vibrant community of Vim users and a growing number of Vim plugins.</p>

<p>Here&#8217;s a list of My Current Plugins <a href="https://github.com/zph/zph/tree/master/home/.vim/bundle">repo</a>:</p>

<p>And here are the ones that I use daily:</p>

<p>[cc_bash]
ack.vim
ctrlp.vim
delimitMate
gundo
slimux
supertab
sweet-rspec-vim
vim-bundler
vim-commentary
vim-detailed
vim-dispatch
vim-endwise
vim-eunuch
vim-fugitive
vim-git
vim-numbertoggle
vim-powerline
vim-rails
vim-repeat
vim-rspec
vim-ruby
vim-ruby-refactoring
vim-surround
[/cc_bash]</p>

<p>Hope this helps get someone started in Vim.  It&#8217;s a very rewarding and sometimes frustrating journey.</p>

<p>I&#8217;d love to help my readers learn Vim! Let me know about your stumbling blocks and difficulties in the comments or on Twitter <a href="http://twitter.com/_ZPH">@_ZPH</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buff - A Gem that Puts Muscle in the Buffer API]]></title>
    <link href="http://zph.github.io/2013/05/buff-a-gem-that-puts-muscle-in-the-buffer-api/"/>
    <updated>2013-05-26T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/05/buff-a-gem-that-puts-muscle-in-the-buffer-api</id>
    <content type="html"><![CDATA[<p>It&#8217;s Done!  <a href="http://github.com/zph/buff">Buff</a> is a Ruby Gem that wraps the <a href="http://bufferapp.com">Buffer</a> API.</p>

<h2>Why Write Buff Gem from Scratch?</h2>

<p>Because the current Buffer Gem doesn&#8217;t have full coverage for the API.  I started to update the Buffer Gem but quickly realized that I was spinning my wheels.  I wanted to implement the gem as a set of layered abstractions and to be able to process the responses using Hashie::Mash.  I envisioned a Gem where each response was a first class Ruby object, where each nested key could be called as a method.</p>

<p>I realized that it would be cleaner and more expedient to code from scratch: I spent the next few hours and produced a gem that had feature parity with Buffer&#8217;s existing gem:</p>

<p>Introducing <a href="http://github.com/zph/buff">Buff</a>, the API complete Ruby Wrapper for <a href="http://bufferapp.com"> BufferApp.com. </a> Buff muscles Ruby into Buffer&#8217;s API.</p>

<h4>Buff is RSpec tested, Webmocked, Travis CI&#8217;d, and easy to use.</h4>

<script src="https://gist.github.com/zph/5654310.js"></script>

<h2>Setbacks and Triumphs</h2>

<p>It wasn&#8217;t all roses and perfume in the creation of this gem.   Three setbacks stand out in my mind.</p>

<h3>Webmock</h3>

<p>I&#8217;ve previously used VCR for testing web APIs, but wanted to use a new system to build new skills.  Webmocks are very pleasant to use and allowed the Specs to verify what API was contacted, along with testing the body content and return values.</p>

<h3>HTTP Libraries</h3>

<p>Buff Gem started with <strong>HTTParty</strong>, which was splendid while implementing the [cci]HTTP GET API[/cci] methods.  Once I began implementing the [cci]HTTP POST[/cci] requests I started experiencing discomfort with using <strong>HTTParty</strong>.  It&#8217;s a reliable library but I didn&#8217;t gel with the DSL for describing HTTP requests.  Thankfully the <strong>HTTParty</strong> calls were wrapped inside the [cci]post[/cci] and [cci]get[/cci] methods in [cci]Buff::Client::Core[/cci].</p>

<p>Since the code was tested with Rspec and the post and get methods were abstracted, swapping out <strong>HTTParty</strong> for <strong>Faraday</strong> was merely a one hour setback.</p>

<p>What a wonderful confirmation that it&#8217;s valuable to wrap external library calls in an abstraction method inside your own library.  This made dependency swaps much simpler.</p>

<h3>Creating correct &#8220;application/x-www-form-urlencoded&#8221; Data</h3>

<p>I expected to find a Standard Library tool for converting a nested Hash + Array object into www-form-encoded data.  I was sorely disappointed, looking at you Addressable Gem, and spent hours trying to find an already coded solution.</p>

<p>After stepping back from the code for two days, I was explaining the problem to non-technical coworkers.  In that moment, my subconscious presented the answer.  I realized how easily I could write the transformation myself.  I mentally coded it on the way home that afternoon and wrote it in bytes that evening.  Here&#8217;s the implementation from [cci]Buff::Client::Encode[/cci]:</p>

<script src="https://gist.github.com/94a89ea5abcfa6f60ee1.js"></script>

<p><strong>Moral of the story</strong>: When stumped, back off and solve another problem.  The subconscious is a useful ally.  Hours of struggling could have been saved through patience and getting other things done.</p>

<h2>What&#8217;s Next?</h2>

<p>Since the Buff Gem provides greater coverage of the Buffer API than the existing Gem, it&#8217;d be awesome to see it replace Buffer Gem as the official Ruby Wrapper.</p>

<p>I feel great about completing a Gem with 100% coverage of an HTTP API :).</p>

<p>I&#8217;m considering writing a couple of small Buffer CommandLine tools for easy posting.  If I have more steam, I&#8217;ll add an Alfred Workflow on top that allows posting to Buffer!</p>

<h2>Want a Demo of Using Buff inside Pry?</h2>
<iframe src="http://showterm.io/1b512291be06a620e4bc6#fast" width="640" height="480"></iframe>
<h2>PS</h2>

<p>If you work with <a href="http://bufferapp.com"> Bufferapp </a> and want to adopt this Gem as your Official Ruby Wrapper, that would be snazzy.  Let&#8217;s talk: <a href="http://twitter.com/_ZPH">@_ZPH</a> or <a href="mailto:zander@civet.ws">Zander</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travel Advice You Can't Afford to Miss]]></title>
    <link href="http://zph.github.io/2013/05/travel-advice-you-cant-afford-to-miss/"/>
    <updated>2013-05-06T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/05/travel-advice-you-cant-afford-to-miss</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_692&#8221; align=&#8221;alignleft&#8221; width=&#8221;500&#8221;]<a href="http://www.civet.ws/wp-content/uploads/2013/05/8314413270_f974052c3a.jpg"><img src="http://www.civet.ws/wp-content/uploads/2013/05/8314413270_f974052c3a.jpg" alt="By: Frontierofficial" width="500" height="335" class="size-full wp-image-692" /></a> By: <a href='http://www.flickr.com/photos/frontierofficial/8314413270/' target='_blank'>Frontierofficial</a>[/caption]

<p>Traveling in a foreign country can be filled with wonder and excitement.  It can also turn into a nightmare without the right preparation.</p>

<h2>Travel Tips</h2>

<ul>
<li>Bring currency (US / UK / Euro) in decent quantities in small bills ($500+). This is emergency money for towns without ATMs.</li>
<li>Carry that currency distributed among various hiding places on your person and in your luggage. Consider getting extra hidden pockets sewn into some of your pants.</li>
<li>Wear easily washed clothing. Quick dry fabric is very convenient when forced to wash clothing in a hostel&#8217;s sink.</li>
<li>Bring all purpose liquid soap. I&#8217;m talking about hippie soap here like &#8216;Dr. Bronner&#8217;s&#8217;. It can be used for washing your body, your hair, and your clothing.</li>
<li>Keep only enough currency for a day or two in your wallet or purse. If someone pickpockets you, you&#8217;ve lost very little and have a story to tell.</li>
<li>Be skeptical of people who approach you. Some are great awesome people, others are hustlers. Learn the difference.</li>
<li>Be more trusting when you approach people. I made a habit of choosing my taxi drivers rather than choosing the ones who were overly interested in me.</li>
<li>Avoid the heavily touristed areas and densely populated areas. Pickpockets and scams will be more prevalent where a higher density of marks exists.</li>
<li>Withdraw currency from ATMs in well lit areas.</li>
<li>Use ATMs instead of currency exchangers.  You&#8217;ll tend to get better rates.</li>
<li>Bring a good little flashlight and headlamp, especially when visiting areas without much infrastructure.</li>
<li>Shoot plenty of photos, especially of people and local vibrancy. Landscape photos won&#8217;t have the same staying power.</li>
<li>Write a journal or blog while traveling to share your experiences with those back home.</li>
<li>Contact your banks and credit card companies before leaving. Let them know the locations of your visit and the duration. This minimizes the risk that the cards will trigger fraud alerts while traveling.</li>
<li>Leave a photocopy of passport, credit cards and any other travel paperwork with a trusted friend or family member. Keep a second photocopy set in your luggage.</li>
<li>If you want or need connectivity while away, bring a GSM unlocked phone.  In the US, a phone from AT&amp;T that&#8217;s unlocked would be a decent choice.</li>
<li>Learn basic internet safety and use a VPN or SSH Tunnel for routing your data when on unknown internet connections. Better safe than hacked.</li>
<li>Consider using 2 Factor Authentication if you must use an Internet Cafe to log into your email. Even with this protection, try to avoid it.</li>
</ul>

<p>What other travel tips have you used to make foreign travel a smoother process?</p>

<p>If you want to engage in <a href="http://www.civet.ws/2013/05/hack-your-finances-thoughts-on-extreme-retirement-planning/"> Extreme Retirement Planning  </a>, living abroad on $600 - $1000 / mo and retiring early wouldn&#8217;t be too horrible ;) Especially with a remote job!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Privilege Means Responsibility]]></title>
    <link href="http://zph.github.io/2013/05/privilege-means-responsibility/"/>
    <updated>2013-05-04T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/05/privilege-means-responsibility</id>
    <content type="html"><![CDATA[<h1>Let&#8217;s redefine privilege</h1>
Because it&#8217;s not working well for our society.

Here&#8217;s what we have right now:

Privilege
: advantage, benefit; prerogative, entitlement, right; concession, freedom, liberty.

Advantage, benefit, freedom, liberty: those are all accurate words for what I disproportionately enjoy with being a privileged member of society. In fact, I&#8217;ve got just about all of the social advantages that one could ask for with being white, male, able bodied, living in a well off country and a few other choice characteristics. I rolled mostly 20 in this attempt at life. Because of my family&#8217;s assistance and scholarships, I also had the advantage of completing my Bachelor&#8217;s Degree. Did I mention that my parents both had college degrees or better when I was young?
<h2>Where this puts me in life according to statistics:</h2>
According to <a href="http://www.infoplease.com/ipa/A0104552.html">US Census</a> data from 2010 median income varies significantly along ethnic lines:
<ul>
	<li>White = $54k</li>
	<li>Black = $32k</li>
	<li>Hispanic = $37k</li>
</ul>
According to <a href="https://www.census.gov/compendia/statab/2012/tables/12s0703.xls">US Census</a> data from 2009 that compares income of full time workers based on education and sex for my age:
<ul>
	<li>Male = $67k</li>
	<li>Female = $52k</li>
</ul>
How about the fact that during my childhood, I had one parent with a professional degree and one with a bachelor&#8217;s degree?

<img alt="Poverty Based on Parent's Education" src="http://www.nccp.org/publications/images/pei07_fig1.jpg" />

To summarize, statistics indicate that I earn $1.69 for every $1 that a black person will earn, $1.29 for every $1 that a woman earns, and my odds of being a child in poverty were ~ 1/4 that of a child raised by parents without a high school diploma. This is purely a function of my genetic and socio-economic background not about any shred of my own accomplishments. It bears repeating that the fact that I have an advantage in earning power as outlined in this paragraph has nothing to do with my own merit.

Want to argue these statistics? A study found that transgender women earned 32% less on average following their transition from male to female! <a href="http://www.time.com/time/nation/article/0,8599,1847194,00.html">Source</a>

I&#8217;ve faced some challenges in life, but they&#8217;re a lot easier to overcome when playing with a stacked deck.
<h2>I&#8217;m Privileged So&#8230;</h2>
I&#8217;m introspective enough to admit that I haven&#8217;t always been as aware of my advantages as I am now. Being a few decades into life, living meagerly for a decent chunk of my twenties, and traveling outside of the United States has opened my eyes. Having friends who are different than myself has opened my eyes. Listening to smart people who have huge hearts has also opened my eyes. Witnessing people who live in abject poverty has opened my eyes.

And this process isn&#8217;t over, I&#8217;m still learning. A couple of months back was my first exposure to the term &#8216;ableism&#8217;. I hadn&#8217;t previously considered that calling someone &#8216;dumb&#8217; harkenens back to this definition

dumb
: offensive (of a person) unable to speak, most typically because of congenital deafness: he was born deaf, dumb, and blind.

Or that using the word &#8216;insane&#8217; as a pejorative probably refers to individuals who suffer from schizophrenia and who historically faced persecution and death.
<h2>I&#8217;m still learning</h2>
I&#8217;m proud of where I&#8217;ve gotten to in my approach to the world, but I want to share an example or two of my own past prejudices. I share them not because I&#8217;m proud of my behavior, quite the contrary; I share them to show that it&#8217;s a learning process.

When I was in elementary school, I remember seeing another child on the basketball court. In most respects, he appeared quite similar to me. But his elbows and arms were covered in scaly, reddened skin that cracked and bled. I remember my revulsion and how I avoided him.

I can&#8217;t say that I thought much of that child after moving on from elementary school. I became busy with school, friends, baseball and listening to music. In high school I started having to deal with my own challenge in life called psoriasis. Psoriasis is an autoimmune disorder where cells reproduce much faster than normal, causing intense itching and discomfort. It wasn&#8217;t until a few years into dealing with psoriasis that it dawned on me: that child who I avoided suffered from the very skin disorder as I did.
<h2>Join Me</h2>
As it stands now, I&#8217;m playing the game of life with a stacked deck. I face less consequences for raising my voice in support of individuals who don&#8217;t have that luxury. I have better financial resilience to deal with social opposition as I work towards better equity in our society.

It&#8217;s not only my choice to do this, it&#8217;s also my responsibility that comes with the hand I was dealt. I&#8217;m going to take a stand on issues of gender equality, racial equality, sexual orientation equality (and more broadly the right to be yourself), disabled rights, bullying, and marginalizing behavior. I may not get it all right, but I welcome receiving feedback so that I can improve.

The next time you see someone use a pejorative based on race, disability, sex, or someone bullying another individual:

<em>Don&#8217;t fucking let it slide</em>!

Stand up and lend your voice to the conversation. Your voice offsets the hatred and bigotry that is being leveled against someone. You&#8217;ll be glad you took a stand and you&#8217;re making this world of ours a better place.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Your Finances - Thoughts on Extreme Retirement Planning]]></title>
    <link href="http://zph.github.io/2013/05/hack-your-finances-thoughts-on-extreme-retirement-planning/"/>
    <updated>2013-05-02T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/05/hack-your-finances-thoughts-on-extreme-retirement-planning</id>
    <content type="html"><![CDATA[<p>Extreme Retirement Planning is a financial movement that I discovered a few weeks ago.  At least, that&#8217;s when I heard of that terminology for being frugal.  As it happens, I&#8217;ve been implementing some of those ideas for the past year or two.  But these Extreme Retirement Planning (ERP) folks crank it up to 11 and that&#8217;s where I have something to learn.</p>

<h2>Concept in a Nutshell</h2>

<ul>
<li>Save as great a % as possible (up to 85% or more) of net income (post tax dollars).</li>
<li>Live off as little spendable income, including cutting out luxuries and vehicles, to the greatest degree possible.</li>
</ul>

<p>What&#8217;s the result? Being able to &#8220;retire&#8221; in 4-15 years on the lower level of income that the ERPer has become accustomed to.</p>

<h2>What Does This Mean for Me?</h2>

<p>If I can live off of $1000 / mo while putting the rest of my take home cash into savings, for the next 7 years, I can retire in 2020.  And by retire, I mean live off of the expected 4% growth on my principle even after factoring in 3% inflation.  Then at that point, any income that I make is free to fritter or save because my daily costs are taken care of.</p>

<p>Assuming that there are two people working at this level of income, then living off $2000/mo as a family isn&#8217;t too tough in some parts of the country. And retiring in 7 years wouldn&#8217;t be too bad either :).</p>

<p>I&#8217;ll explore this concept more as I dig into trimming my excess spending.</p>

<p>Credit for the concept and basic calculations goes to Mr. Money Moustache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goals and Giving Back: Creating Meaning in Life]]></title>
    <link href="http://zph.github.io/2013/04/goals-and-giving-back-creating-meaning-in-life/"/>
    <updated>2013-04-29T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/04/goals-and-giving-back-creating-meaning-in-life</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_599&#8221; align=&#8221;alignleft&#8221; width=&#8221;500&#8221;]<a href="http://www.civet.ws/wp-content/uploads/2013/04/4701714888_e29a0e3e8e1.jpg"><img src="http://www.civet.ws/wp-content/uploads/2013/04/4701714888_e29a0e3e8e1.jpg" alt="" width="500" height="331" class="size-full wp-image-599" /></a> By: <a href='http://www.flickr.com/photos/johnonolan/4701714888/' target='_blank'>John O&#8217;Nolan</a>[/caption]

<p>I&#8217;ve been in serious discussions with a new friend regarding the refinement of the self.  The discussions started at RubyMidwest but since I don&#8217;t yet have their permission, I&#8217;ll leave the individual as a shadowy anonymous figure.</p>

<p>The evening of the discussion brought about a conversation regarding refactoring oneself through a constant process of testing and revising.</p>

<p>I shared my own experience of setting actionable goals related to various facets of my life, a choice that was influence by <em>7 Habits of Highly Effective People</em>.  These goals run the gamut of goals, anywhere from family, friendship, business, personal knowledge, technical skill acquisition, etc.  Each of the goals is categorized and provides a broadly sketched roadmap of what I want to apply my energy to during 2013.</p>

<p>Without going into all of the details, I&#8217;d like to provide a couple of examples.</p>

<p>One of my larger goals for the year is to be less of a consumer and more of a producer.  This applies both in the technical world, where I want to write more code and blog entries (rather than simply consuming them) and also in my online social experience where I&#8217;m moving out of my introverted shell and making connections with likeminded individuals.  Thus far, this goal has been a smashing success.  I made new Ruby friends at RubyMidwest and I&#8217;m a much more active member of the online community.  I&#8217;m pleasantly surprised that this is such a natural goal to work on.  It has become an outlet of my energy that&#8217;s relaxing and fulfilling.</p>

<p>In this same vein, I&#8217;ve become increasingly interested in giving back and contributing via teaching or volunteering in order to help others along their path.  <em>Pragmatic Thinking and Learning</em> cites the Dreyfus Model of Learning, which loosely paraphrased, indicates that because I&#8217;m a beginning intermediate programmer, I&#8217;m uniquely prepared to lend a hand to beginners.  The fact that I&#8217;ve been teaching myself Ruby for the past 3 years means that beginners&#8217; struggles are fresh in my mind.  So I&#8217;m taking what time I can out of my schedule to lend a hand to the next generation of passionate programmers.</p>

<p>Perhaps in the not too distant future, I&#8217;ll have a work setup that encourages and allows me to spend a portion of my time giving back to the community.  The time&#8217;s approaching where I won&#8217;t be able to resist the allure of professionally joining the ranks of software developers.</p>

<p>If I may breach the fourth wall, what are your goals and aspirations gentle reader? I&#8217;d love to hear about them in the comments or in the walled garden of Twitter <a href="http://twitter.com/_ZPH">@_ZPH</a>.</p>

<p>PS - Start mentoring someone, now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop, Drop, and Sleep]]></title>
    <link href="http://zph.github.io/2013/04/stop-drop-and-sleep/"/>
    <updated>2013-04-24T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/04/stop-drop-and-sleep</id>
    <content type="html"><![CDATA[Exhaustion is in the air today. I fell asleep at 7pm and according to my Twitter feed, it&#8217;s not just me.
<h3>So is:</h3>
<blockquote class="twitter-tweet"><p>Passed out on the couch at 9. Been working so much lately :/</p>&mdash; ashe dryden (@ashedryden) <a href="https://twitter.com/ashedryden/status/326888578204434433">April 24, 2013</a></blockquote>
<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3>And:</h3>
<blockquote class="twitter-tweet"><p>to code or sleep? that is the question.</p>&mdash; Derek Bender (@djbender) <a href="https://twitter.com/djbender/status/326892518992138241">April 24, 2013</a></blockquote>
<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3>And Later (live update while blogging):</h3>
<blockquote class="twitter-tweet"><p>feel in all sorts of squinty. rest is coming.</p>&mdash; Derek Bender (@djbender) <a href="https://twitter.com/djbender/status/326911928024854528">April 24, 2013</a></blockquote>
<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3>And Even:</h3>
<blockquote class="twitter-tweet"><p>@<a href="https://twitter.com/elight">elight</a> @<a href="https://twitter.com/_zph">_zph</a> @<a href="https://twitter.com/centipedefarmer">centipedefarmer</a> @<a href="https://twitter.com/bantik">bantik</a> @<a href="https://twitter.com/kerrizor">kerrizor</a> methinks I may be a bit tired.</p>&mdash; PJ Hagerty (@aspleenic) <a href="https://twitter.com/aspleenic/status/326899253261783040">April 24, 2013</a></blockquote>
<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3>We&#8217;re exhausted!</h3>
[caption id=&#8221;attachment_588&#8221; align=&#8221;alignnone&#8221; width=&#8221;500&#8221;]<a href="http://www.civet.ws/wp-content/uploads/2013/04/497374910_9ae0f0adfa.jpg"><img src="http://www.civet.ws/wp-content/uploads/2013/04/497374910_9ae0f0adfa.jpg" alt="" width="500" height="375" class="size-full wp-image-588" /></a> By: <a href='http://www.flickr.com/photos/umjanedoan/497374910/' target='_blank'>umjanedoan</a>[/caption]

Exhaustion has become the norm.

Take my own evening last night as an example. We had a long day at work and I was spent by the time I arrived home. After running a necessary errand, the hour had pushed towards 9PM, which meant dinner was going to be a cursory affair.

You, my gentle reader, might expect me to crash into an uninterupted slumber at this point in the story. Unfortunately, I didn&#8217;t.

I spent the next ~ 3 hours reading tech news, catching up with friends on Twitter, and staring semi-comatose at my laptop monitor. I tried to work on learning new programming techniques, but it wasn&#8217;t sinking in, nor did I have the requisite motivation. I collapsed into bed sometime after midnight and woke feeling groggy and spent.

I&#8217;ve been reflecting on the <em>WHY</em> of this behavior and it&#8217;s the motivation for this blog post.
<h1><em>WHY</em></h1>
I spend a fair bit of effort in life considering my actions and the outcomes involved. I try to play these in the right manner to &#8220;Optimize for Happiness(TM)&#8221; as <a href="http://twitter.com/erniemiller">@erniemiller</a> so eloquently stated at RubyMidwest 2013.

But I didn&#8217;t follow through on the logical process last night because in addition to needing rest, I also needed to decompress and stimulate my mind.

I&#8217;m going to go out on a limb here: I think that my reluctance to fall asleep is endemic of our social expectations in a slice of American society.
<h1>Work Longer, Faster, Smarter</h1>
Living in a culture that idolizes workaholics demands a special response from those of us who yearn to maintain a work-life balance. Especially when prone to hard work and long hours, stepping back and turning off can be a challenging habit to cultivate.

I&#8217;m not sure what the right response is when we have competing pressures in life, beyond making the best decisions available given the resources at that moment. And with each decision, reflect on the behavior and outcome to determine if it should be repeated.

The right answer for me that night was probably a bit of interracting with friends on Twitter (no more than 60 min) followed by time with kittens and my partner.

Lesson learned, hopefully :).

I&#8217;d love to hear tips and feedback for how you, my reader, addresses this. Leave a note in the comments or shout at me on Twitter: <a href="http://twitter.com/_ZPH">@_ZPH</a>.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Increasing Productivity with Shortcuts]]></title>
    <link href="http://zph.github.io/2013/04/increasing-productivity-with-shortcuts/"/>
    <updated>2013-04-20T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/04/increasing-productivity-with-shortcuts</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_582&#8221; align=&#8221;alignleft&#8221; width=&#8221;500&#8221;]<a href="http://www.civet.ws/wp-content/uploads/2013/04/3879260111_c56e8a0c1c.jpg"><img class="size-full wp-image-582" alt="" src="http://www.civet.ws/wp-content/uploads/2013/04/3879260111_c56e8a0c1c.jpg" width="500" height="333" /></a> By: <a href="http://www.flickr.com/photos/orcmid/3879260111/" target="_blank">Dennis Hamilton</a>[/caption]

I&#8217;m writing this to the incessant tick-tock of a digital Pomodoro, which seems fitting as this post will discuss productivity hacks.

We won&#8217;t be talking about run of the mill ones. I won&#8217;t berate my readers to modify their &#8216;/etc/hosts&#8217; file in order to route Reddit or Twitter to localhost.

No, these are real habits that help me be happier and more productive with the time that I spend on a computer.
<h1>Pre-Hack Step</h1>
Have a goal. Know where you&#8217;re heading and why. Act intentionally. This has been driven home to me by my own experiences in life. Recently, I&#8217;ve been reminded of this concept by the wonderful book, <em>7 Habits of Highly Effective People</em>. In it, the author paints the picture of chopping through a forest without knowing what cardinal direction one is following.

If you&#8217;re trying to learn a new technology, set actionable goals for yourself and talk about it with friends and colleagues. If you&#8217;re working on personal relationships, admit that to yourself and push yourself to be better.
<h1>Technological Hacks</h1>
<ul>
	<li>Make everything a shortcut. I accomplished this by following Steve Losh&#8217;s article <a href="http://stevelosh.com/blog/2012/10/a-modern-space-cadet/#hyper">On the Cadet Keyboard</a>. I configured my MacBook Air&#8217;s keyboard to use the right Alt key as a hyper key (a chord combination of 4 modifiers). This yields a unique key namespace for setting up non-conflicting keyboard shortcuts.</li>
	<li>Use a program like Keyboard Maestro or BetterTouchTool to setup shortcuts for all of your regular programs. For me these are iTerm2, Chrome, Finder (or alternative), ThinkingRock, Email Client etc. My terminal is never further away than a HyperKey-T and possibly a Cmd-N to create a new window.</li>
	<li>One keyboard shortcut that stands out on my system is a keybinding via Sparrow&#8217;s preferences. The combination alternately brings Sparrow to the front, or hides it. This is amazingly useful in order to not lose as much energy in context switching. In a matter of 4 seconds and by mashing the same key combination twice, I can check on a new email and then relegate Sparrow to the background.</li>
	<li>Make great use of Alfred.app! Use custom searches for common items (ie Google search becomes &#8220;g <em>searchterm</em>&#8221;, note that this is built into Alfred). Add your own shell scripts for common tasks, ie checking for information on a public website via a prefilled URL. Use Alfred to execute regular shell commands by prefixing the command with a &#8220;&gt;&#8221;. For example, I added a Ruby script to my &#8216;~/bin&#8217; directory that sends an email to my dedicated GTD account. I access the script from Alfred, fire off a note for later, and am back to my current task without much distraction. This is a great way to keep your mind empty and receptive (just make sure to process the GTD tasks in a timely manner).</li>
</ul>
Have more productivity hacks? I&#8217;d love to hear them in the comments below or via Twitter <a href="https://twitter.com/_ZPH">@_ZPH</a>.

I&#8217;ll post at some point about my experiences with the Pomodoro technique, but at this point it&#8217;s too early for me to comment.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMidwest 2013: Lessons and Reflections]]></title>
    <link href="http://zph.github.io/2013/04/rubymidwest-2013-lessons-and-reflections/"/>
    <updated>2013-04-12T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/04/rubymidwest-2013-lessons-and-reflections</id>
    <content type="html"><![CDATA[<a href="http://www.civet.ws/wp-content/uploads/2013/04/20130411-RubyMidwest-2013-Me-Evan-Light-and-PJ-Hagerty.jpg"><img class="alignleft size-full wp-image-556" alt="20130411 RubyMidwest 2013 Me, Evan Light and PJ Hagerty" src="http://www.civet.ws/wp-content/uploads/2013/04/20130411-RubyMidwest-2013-Me-Evan-Light-and-PJ-Hagerty.jpg" width="1024" height="768" /></a>

I attended <a href="http://twitter.com/rubymidwest">RubyMidwest</a> and want to share both my impressions and resulting growth.

But let&#8217;s backup, I had debated whether to drive or to fly out to Kansas City, MO for the conference. With only two weeks to spare, our primary long distance car began having some trouble. So, I looked into the costs of renting a car, the cost of wear and tear on our car, vs the possibility of flying. After tallying up the costs and figuring that I could work part of the day while flying, I booked a ticket for Kansas City. In the future I&#8217;ll be more eager to travel by air, given that I can successfully work from anywhere with WiFi or 4G Coverage. To a lesser extent, for non-connected work, I&#8217;m also productive without the internet.

If my first successful choice was flying, then my second successful choice was when I scheduled my arrival and departure. I flew in the day before the conference and out the day after. By doing this, I was rested going into the conference and able to socialize the night before it started. Flying out the day after the conference had the same effect of enabling more time with the folks that I wanted to see.

Now mind you, I find these concepts fairly un-engaging but they&#8217;re important for getting the most out of the conference experience.

My next big win was staying at the official conference hotel. This means that at 4am when you can barely see straight from tiredness, your bedroom is only an elevator away. Staying at the main hotel also encourages social activity&#8230; which is why we&#8217;re really at the conference. Yes, it&#8217;s more expensive. Yes, it might be a tacky venue. Yes, it&#8217;s not all magically hipster delicious. If money&#8217;s an issue, post on Twitter that you&#8217;re looking to split a room. I had the pleasure of sharing the room with <a href="http://twitter.com/elight">Evan Light</a> because he posted on Twitter about the hotel not having vacancies. Sharing a room&#8217;s also a great way to make sure you&#8217;re staying in the social mix of the conference rather than scuttling off to a quiet place.
<h3>Twitter is the lifeblood of Ruby Conferences.</h3>
Add a column in your Twitter client to track the hashtag designated by the conference. This means you can follow the flow and group activities. It&#8217;s also a good place to share your enthusiasm for RubyMidwest and ensure that next year has an equally awesome crowd. If you&#8217;re shy or want help being social, post something like, &#8220;Hey come say hi to me, I&#8217;m wearing a Yellow Gnu Linux T-Shirt&#8221;. Incidentally, that&#8217;s how I met <a href="http://twitter.com/wikimatze">Matthias</a> who is writing this book about <a href="https://leanpub.com/padrino">the Padrino Framework</a>.
<h3>Never Eat Alone</h3>
Except for coffee when you&#8217;ve just rolled out of bed after 4 hours of sleep. Otherwise, don&#8217;t eat alone. This is your magical chance to spend time with people as nerdy or nerdier than you. If you&#8217;re stumped for conversation, ask how they started programming, what their favorite Gems are, what tools they use, if they&#8217;re part of the 20% of programmers who Raided in World of Warcraft (then judge them according to whether they rolled Horde or Alliance).
<h3>Find a Small Group</h3>
I preferred the time spent in groups of 2-8 people. This size allows for meaningful conversation between the participants. It&#8217;s also easier for those of us who are slightly hard of hearing.

Each night of the conference had some conversational highlights.

Friday night&#8217;s highlights were centered around the balcony at the after-party. <a href="http://twitter.com/kobier">@kobier</a>, <a href="http://twitter.com/elight">@elight</a>, <a href="http://twitter.com/samullen">@samullen</a> explained to a fellow not from the conference what it was that programmers do. By the end of the conversation, the young man was very enthusiastic about learning to program. I volunteered to help him get started and we&#8217;ve been in email contact since the conference ended. This conversation was an impressive display of the welcoming attitude that can exist in the Ruby community.

On the last night of the conference, after the energy had worn off, I had some meaningful and insightful conversations. I&#8217;m looking at y&#8217;all: <a href="http://twitter.com/bantik">@Bantik</a>, <a href="http://twitter.com/zmoazeni">@zmoazeni</a>, <a href="http://twitter.com/aspleenic">@aspleenic</a>, <a href="http://twitter.com/ashedryden">@ashedryden</a>, <a href="http://twitter.com/erniemiller">@erniemiller</a>, <a href="http://twitter.com/kerrizor">@kerrizor</a>, <a href="http://twitter.com/theotherzach">@theOtherZach</a>, &#8230; and more.
<h3>Initiate Conversations</h3>
I started many conversations at RubyMidwest simply by walking up to people and introducing myself. The odds are that this will lead into a flowing conversation. If it&#8217;s stilted and awkward, get the conversation onto technical topics&#8230; that&#8217;s the bread and butter of conferences. Also, people at regional Ruby Conferences are remarkably friendly.
<h3>Company Culture Shows Through Employee Behavior</h3>
I&#8217;m looking at you genial folks from <a href="http://twitter.com/harvest">@Harvest</a>: Zach and Paul.

Sending folks who positively represent your company to community conferences is a win-win situation. The devs get to stretch their knowledge and have fun. The company builds a reputation among Ruby&#8217;s enthusiastic true believers. Why wouldn&#8217;t companies want to recruit from this pool of people?
<h3>What Did I Really Learn?</h3>
That I&#8217;m attending MadisonRuby, SteelCityRuby and DCamp this year.

I finally decided to transition from an anonymous icon on Twitter to a goofy pic of myself.  Doing this is a direct result of making #rubyfriends at the conference.  And when they see me on Twitter, I&#8217;d rather that they see my face delivering the pithy witticisms.

I&#8217;ve submitted a conference talk proposal to two venues since returning from RubyMidwest.  I&#8217;m also excited about stepping up my programming game and getting more involved in the community.

These are my people :).
<h4>Thanks</h4>
To Wes Garrison of <a href="http://databasically.com/">Databasically</a>, <a href="http://twitter.com/samullen">Sam Mullen</a>, Ross, Cerner, and everyone who made this event possible.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pricing a Product: Napkin Math]]></title>
    <link href="http://zph.github.io/2013/03/pricing-a-product-napkin-math/"/>
    <updated>2013-03-20T00:00:00-04:00</updated>
    <id>http://zph.github.io/2013/03/pricing-a-product-napkin-math</id>
    <content type="html"><![CDATA[I&#8217;m facing the novel prospect of pricing a software product. This product is something that I created during evenings and weekends. It&#8217;s very specialized for my current industry, so I won&#8217;t go into the details of the product. But suffice to say that it sorts data in a time saving way.
<h2>Product Benefits</h2>
<ul>
	<li>Saves 1 to 10 + hours per assignment</li>
	<li>Each hour saved is worth ~ $30 +</li>
	<li>Each team member has their own assignment</li>
	<li>5 to 10 assignments submitted each week</li>
	<li>Concept can be applied for other divisions, requiring 60% retooling of the application.</li>
	<li>Providing difficult to find answers which could avoid legal fees and fines ranging from $10,000 to $1,000,000 or more.</li>
</ul>
<h2>Product Costs</h2>
<ul>
	<li>Developer&#8217;s time, my own = Approximately 240 hours.</li>
	<li>Ongoing maintenance time = 0.5 hr / wk.</li>
	<li>Monthly hosting cost = Variable based on capacity but definately &lt; $50 / month</li>
	<li>Equipment, utilities, etc during development = Not factored into estimates.</li>
</ul>
<h2>Additional Factors</h2>
<ul>
	<li>Charging for the creativity that provided the impetus.</li>
	<li>Specialized industry knowledge = Priceless :)</li>
</ul>
<h3>What&#8217;s my thought process?</h3>
My first thought was to give it away as a way to parlay into a different technical role in my organization. Like a good dealer, the first custom software taste is free, but the rest will &#8220;cost ya&#8221;.

Given further information about pricing dynamics and company response to innovation, this is not seeming to be as appealing a prospect as previously thought.
<h3>Cost based pricing</h3>
Charge a sum based on the hours invested plus a bit of padding. This is the natural method that comes to mind when I consider pricing. According to RubyFreelancer Podcast, this is the <em>Retail</em> method of pricing. They also explain at length that this is a shortsighted method of pricing a product. The short explanation is that this ties your income to an hourly wage. One can certainly make a solid income off of these numbers. But it&#8217;s difficult to transform a product into residual income or a grand success.
<h1>Result</h1>
240 hrs * $150 / hr = $36,000
<h3>Naive Pricing</h3>
Price the product at an arbitrary value, such as $5,000. This one is also tempting. This approach seems to reflect &#8216;Imposter Syndrome&#8217;. Pricing arbitrarily doesn&#8217;t tie the product&#8217;s price to the benefits and savings received by the purchasing organization. Based on the business books and sales books that I&#8217;ve read in the last year, this isn&#8217;t a likely method for sales success.
<h3>Value/Savings Based Pricing</h3>
Price the product so that purchaser saves money by using it.
10 assignments/wk * 2 hr savings/assignment * $30 savings/hr = $600/wk savings
+ Improved chance of avoiding legal fees
+ Providing more accurate information to company&#8217;s client, leading to increased client retention. (Would cost $12M+ to lose a client)
= $50k to 100k

Savings if my system is implemented beyond our regional office (ie statewide) = ~$6,000/wk on speeding up completion of assignments. This value doesn&#8217;t factor in avoiding legal fees or improved client retention.
<h3>Conclusion</h3>
My plan to learn more about business and sales is already changing the way that I approach the process of selling my product. I&#8217;m moving towards value based pricing and considering how to turn the product into a residual income stream. It&#8217;s a very exciting time!

Note: Just for the record - I intend to retain Intellectual Property rights given that it&#8217;s my own work product in off-hours.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Factor Authentication for All the Things]]></title>
    <link href="http://zph.github.io/2013/03/two-factor-authentication-for-all-the-things/"/>
    <updated>2013-03-09T00:00:00-05:00</updated>
    <id>http://zph.github.io/2013/03/two-factor-authentication-for-all-the-things</id>
    <content type="html"><![CDATA[I recently went wild with two factor <a href="https://en.wikipedia.org/wiki/Two_factor_authentication"> authentication </a> due to reading about <a href="http://www.lowendtalk.com/discussion/5686/chicagovps-hacked-bunch-of-vps-customers-offline">Chicago VPS getting hacked</a>. I received the nicest email from <a href="http://www.lastpass.com">LastPass</a> warning me that my email address was among the SQL dump posted by the hacker.
<h2>My Response</h2>
First off, according to ChicagoVPS all the passwords were in the form of salted hashes. So that&#8217;s good! Also, I use unique passwords thanks to LastPass. So losing one password to a SQL dump in the form of a salted hash isn&#8217;t a big deal. At least not with ChicagoVPS. Might be a bigger deal if it was Amazon AWS or a Google Account.
<h3>Back to the Point</h3>
I read a wonderful article, by chance, about a new service called <a href="https://www.authy.com/">Authy</a>. Authy provides easily integrated Two Factor Authentication services that use your phone as the second factor. Authy either uses a smartphone application or a system based on SMS.
<h3>So where did I add it?</h3>
<ul>
	<li><a href="http://www.civet.ws">Here</a> via the <a href="http://wordpress.org/extend/plugins/authy-for-wp/">WP Plugin</a></li>
	<li><a href="http://www.dropbox.com">Dropbox</a></li>
	<li><a href="https://aws.amazon.com/">Amazon AWS</a></li>
	<li><a href="http://gmail.com">Google Account - Gmail</a></li>
</ul>
<h3>Caveats</h3>
After turning on Two Factor Authentication with my Google Account, I needed to setup and start using &#8216;Application Specific Passwords&#8217;. They&#8217;re a way to have a unique password for specific services that are not setup for the Two Factor Authentication system.

To find the settings: Log into Gmail &gt; Settings &gt; Account &gt; Security &gt; 2 Step Verification Settings &gt; Manage Application Specific Passwords &gt; Login Again &gt; Scroll to Bottom of Page.

For each item, like Thunderbird, Sparrow App, Android applications, etc, you&#8217;ll need to give the specific password a name. Next click &#8216;Generate Password&#8217;. Copy that password into your application.

I must say, I&#8217;ll be a lot more comfortable with online transactions when most service providers (esp. Banks, Investment Accounts, Amazon.com, etc) offer Two Factor Login options!

Let me know if you&#8217;ve found any other useful places for using Authy&#8217;s wonderful 2 Factor Auth through the comments below or on Twitter <a href="http://www.twitter.com/_zph">@_ZPH</a>.

Credit for this article&#8217;s inspiration belongs to : <a href="http://danielmiessler.com/blog/">This Blog</a>

Follow up&#8230; Flashed a new Rom to phone and my only hassle was with Amazon Aws 2 factor Auth.  Make sure to do Authy backup to simplify this before flashing new Roman.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Week with ThinkingRock GTD]]></title>
    <link href="http://zph.github.io/2013/03/a-week-with-thinkingrock-gtd/"/>
    <updated>2013-03-03T00:00:00-05:00</updated>
    <id>http://zph.github.io/2013/03/a-week-with-thinkingrock-gtd</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_529&#8221; align=&#8221;alignright&#8221; width=&#8221;300&#8221;]<a href="http://198.211.104.146/wp-content/uploads/2013/03/2301566699_aab007085c.jpg"><img class="size-medium wp-image-529" alt="" src="http://198.211.104.146/wp-content/uploads/2013/03/2301566699_aab007085c-300x225.jpg" width="300" height="225" /></a> By: <a href="http://www.flickr.com/photos/thms/2301566699/" target="_blank">Thomas van de Weerd</a>[/caption]
<h2>The Good</h2>
My first week with ThinkingRock has gone REALLY well for adding tasks. I sit at the computer for much of the day and when a GTD task comes to mind I dump it via <code>Cmd-Space GTD "description of task"</code>.
<h2>The Bad</h2>
Having a very efficient system for adding tasks paired with a <em>HORRIBLY</em> inefficient method of processing tasks causes my GTD Inbox to overflow.

<em>It&#8217;s like having a firehose flowing at full strength and routing it into a gardenhose.</em>
<h2>The Analysis</h2>
The method that I&#8217;m using for adding tasks is very well optimized and uses a decoupled system. Being able to send emails from any device and having the subject and content dropped into ThinkingRock as a pending task is <em>GREAT</em>.

When I go to sort the tasks, I&#8217;m stuck with a system that very literally follows GTD principles, but doesn&#8217;t have sufficient keyboard shortcuts. Processing 35 items by tabbing through textboxes and radio boxes isn&#8217;t my idea of an efficient system. It also makes me wonder if other people are painstakingly mousing through the interface.
<h2>The Answer</h2>
Dig into the source files for ThinkingRock and add enough keyboard shortcuts to &#8220;get things done&#8221;. I started this yesterday on the plane to California and I&#8217;ll post back when I have a chance to work on it more. Given that I don&#8217;t know any Java (other than a session at the LeanDog CodeRetreat with <a href="http://www.twitter.com/stevejxsn">Steve</a>), this will be an interesting challenge :).
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking GTD]]></title>
    <link href="http://zph.github.io/2013/02/efficiency-measurement-and-little-tips-real-gtd/"/>
    <updated>2013-02-23T00:00:00-05:00</updated>
    <id>http://zph.github.io/2013/02/efficiency-measurement-and-little-tips-real-gtd</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_533&#8221; align=&#8221;alignright&#8221; width=&#8221;300&#8221;]<a href="http://198.211.104.146/wp-content/uploads/2013/02/4072190666_6d21864373.jpg"><img class="size-medium wp-image-533" alt="" src="http://198.211.104.146/wp-content/uploads/2013/02/4072190666_6d21864373-300x225.jpg" width="300" height="225" /></a> By: <a href="http://www.flickr.com/photos/rubbermaid/4072190666/" target="_blank">Rubbermaid Products</a>[/caption]

I&#8217;ve been working with <a href="http://www.rescuetime.com">RescueTime</a> for the past week and I&#8217;m <em>VERY</em> happy.

First off, I don&#8217;t have to change a thing to make use of the system. It&#8217;s a great way to benchmark my own time spending habits on the computer. It&#8217;s well setup to allow individual configuration of what <em>you</em> believe is productive and non-productive.

During setup, I thought about all the facets of business and independent projects. I concluded that email is a neutral value of productivity, while programming is +2 and reading <a href="http://www.dont_go_there_it_wastes_your_live.com">HackerNews</a> is -2.

I&#8217;m happy to share this chart for my first week of use:

[caption id=&#8221;&#8221; align=&#8221;aligncenter&#8221; width=&#8221;1035&#8221;]<img alt="" src="http://f.cl.ly/items/2a2V1S1P1i3c2V2P0A40/Screen%20Shot%202013-02-24%20at%2012.11.55%20AM.png" width="1035" height="377" /> RescueTime - 1st Week[/caption]

Notice that I tagged email and meetings as a productivity of 0 because so little useful action comes out of them. Frequently meetings would be best accomplished in short bursts and email involves _LOTS_ of needless repetition.

Given that email accounted for 6 hours of my workweek, I decided to improve the efficiency of my email process. I setup my email account with OtherInbox. OtherInbox is an email sorting service that does awesome things with Google Labels.

Next I added two key combinations for Sparrow.app. One key combination opens a new email from ANY application while the other key combo brings Sparrow to forefront or hides it again. These two changes have saved me lots of time so far and reduced the effort related to context switching.

Share your tips for email hacks and productivity (GTD) hacks! I can be reached via the comments and as [<a href="http://www.twitter.com/_zph">@_ZPH</a>] on Twitter.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finite Keystrokes Before Death : Making the Most of Them]]></title>
    <link href="http://zph.github.io/2013/02/finite-keystrokes-before-death-making-the-most-of-them/"/>
    <updated>2013-02-21T00:00:00-05:00</updated>
    <id>http://zph.github.io/2013/02/finite-keystrokes-before-death-making-the-most-of-them</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_526&#8221; align=&#8221;alignleft&#8221; width=&#8221;300&#8221;]<a href="http://198.211.104.146/wp-content/uploads/2013/02/5637077256_7c2d3c7694.jpg"><img class="size-medium wp-image-526" alt="" src="http://198.211.104.146/wp-content/uploads/2013/02/5637077256_7c2d3c7694-300x225.jpg" width="300" height="225" /></a> By: <a href="http://www.flickr.com/photos/37651136@N05/5637077256/" target="_blank">ericnvntr</a>[/caption]

The idea that we possess a finite number of keystrokes to consume before death is an ominous consideration.

That&#8217;s the concept mentioned in one of RubyFreelancer&#8217;s archived shows by Eric Davis (if I remember correctly). I believe he&#8217;s quoting another person in the episode when he talks about having a finite number of keystrokes remaining.

I&#8217;ve been using a text expander, i.e. snippet application, to help manage the repetitive work of typing. Common phrases or sentences that I use are added as re-usable phrases to a handy program called <a href="http://kapeli.com/">Dash</a>. Dash observes when keystrokes are entered and if a trigger keyword is used, such as &#8216;iirc&#8217;, the program replaces that text with &#8216;if I recall correctly&#8217;. Dash also allows the phrase to have replaceable variables, just like you would expect fom &#8216;Yasnippet&#8217; or &#8216;Snipmate&#8217;.

As a bonus feature, Dash serves the dual purpose of being a &#8216;Heads Up Display&#8217; style documentation viewer. It&#8217;s a great way to lookup STDLIB info from Ruby or CSS info. The only drawback that I&#8217;ve found is needing to manually generate Rdocs since my system settings for RVM do not install them. I accomplished this using the following script:

&nbsp;

I&#8217;ve used the text expansion feature to save thousands of keystrokes in repetitive form entries where other automated solutions are not available.

Try it out and let me know what you think in the comments or on Twitter <a href="http://www.twitter.com/_ZPH">@_ZPH</a>. Oh yeah and map the HUD to something easy to remember like CMD-CTRL-SHIFT D. I keep all of my system-wide shortcuts on the same triple modifier chord so that they&#8217;re unlikely to overwrite standard shortcuts :).

What other methods do you have for reducing repetition?
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThinkingRock GTD: Torn Apart]]></title>
    <link href="http://zph.github.io/2013/02/thinkingrock-gtd-torn-apart-3/"/>
    <updated>2013-02-20T00:00:00-05:00</updated>
    <id>http://zph.github.io/2013/02/thinkingrock-gtd-torn-apart-3</id>
    <content type="html"><![CDATA[<h2>GTD FTW!</h2>

<p>Why am I engaging in this hipster habit of using Covey&#8217;s &#8216;Getting Things Done&#8217; methodology?  <em>Because</em> there&#8217;s something very valuable to it!</p>

<p>The analogies that Stephen Covey uses in his book hit home for geeks.  He describes the working memory we humans possess as Random Access Memory, which requires energy to sustain it.  Furthermore, he reminds the reader that if the RAM is busy, other thoughts can&#8217;t percolate through that stage of consciousness?</p>

<h3>Sound too esoteric?</h3>

<p>Let&#8217;s get down to <em>bare metal</em>. Or <em>brass tacks</em>. Or any other colloquialism that suits.</p>

<p>Throughout the day I have ideas.  Many of them are good ideas :).  Many of these good ideas percolate to the surface at inopportune moments&#8230; like meetings, reviewing reports, or writing code.  These ideas are <em>GREAT</em> but what&#8217;s their value if they disappear before I can act on them?</p>

<p>Nothing.  That&#8217;s how much value these ideas have if they flit right back out of my consciousness.  Might not be a big deal if it&#8217;s remembering a food item to pick-up on the way home.  Might be a <em>huge deal</em> if it&#8217;s a programming or business idea that could be implemented and turned into a product!</p>

<h4>What&#8217;s the solution?</h4>

<p>I mentioned using ThinkingRock GTD system in this <a href="http://www.civet.ws/2013/02/getting-thinking-rock-v2-1-work-on-osx-10-8/">post</a>.  ThinkingRock v2.1 is an open-source project hosted on <a href="http://sourceforge.net/projects/thinkingrock/files/ThinkingRock/TR%202.2.1/"> SourceForge </a>.</p>

<p>ThinkingRock does the usual stuff that one would expect from a GTD program:
* Collect Thoughts in an Inbox
* Processing
* Organization
* Reviewing
* Action</p>

<p>What&#8217;s the killer feature of this app for my workflow?</p>

<h3>That ideas can be dumped into it using the universal communication currency of our age, <em>EMAIL</em>!</h3>

<p>My goal is to reduce the friction in the GTD system so that I waste as little energy as possible on the process itself.</p>

<p>Email input is a very powerful feature.  I&#8217;ve setup a dedicated email account for receiving GTD tasks and then configured ThinkingRock to import tasks from there every 15 minutes.</p>

<p>The next step in this process was writing a short commandline script that is prefilled with the GTD email address.  The script combines all commandline input less the scriptname itself and uses that value as the subject line of the email.  This makes for an incredibly fluid system of GTD task entry.</p>

<p>Here&#8217;s the simple Ruby script for this task (note that auth info is placed in <code>~/.gmailrc</code>):
  <script src="https://gist.github.com/zph/5001831.js"></script></p>

<p>But wait, there&#8217;s more!  If you keep reading this blog post, you&#8217;ll receive more time saving advice at no additional cost.  That&#8217;s &#8220;#{SOME<em>MADE</em>UP_VALUE}&#8221;!</p>

<p>Back to the point, I integrated this script into Alfred.app.  Now the tasks can be entered directly from Alfred!</p>

<p>I&#8217;ve only scratched the surface so far with getting back into the GTD methodology&#8230; but I&#8217;m excited!  Having better programming chops this time when approaching GTD is certainly improving the process :).</p>

<h4>Still to come:</h4>

<p>I discussed in this <a href="http://www.civet.ws/2013/02/getting-thinking-rock-v2-1-work-on-osx-10-8/">post</a> that I wanted to use the open-source version rather than the newer closed source version because of having the ability to dig into the code.  In an upcoming post I&#8217;ll discuss how the open-source program allowed me to investigate the data structure used for ThinkingRock in a way that would be much more challenging if I lacked access to the project source-code!</p>

<p>Let me know in the comments or on Twitter (<a href="http://www.twitter.com/_ZPH">@_ZPH</a>) if you have ideas on how to improve the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Toggling Pry in Ruby Script]]></title>
    <link href="http://zph.github.io/2013/02/toggling-pry-in-ruby-script/"/>
    <updated>2013-02-18T00:00:00-05:00</updated>
    <id>http://zph.github.io/2013/02/toggling-pry-in-ruby-script</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using the daylights out of <a href="https://github.com/pry/pry">Pry</a> ever since learning about it ~ 1 year ago.  I&#8217;ve also been evangelizing about it to anyone who will listen:</p>

<blockquote class="twitter-tweet"><p>@<a href="https://twitter.com/_zph">_zph</a> Thanks for reading!And thanks for teaching me tmux and pry.Been trying them here and there - still very shaky with tmux.</p>&mdash; Steve Jackson (@stevejxsn) <a href="https://twitter.com/stevejxsn/status/302758800069365761">February 16, 2013</a></blockquote>

<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>The most recent way that I&#8217;m using Pry is by dropping the following line into anywhere that I need to work with:
<code>require 'pry'; binding.pry</code></p>

<p>But adding that to scripts and then deleting it becomes repetitive.  So here&#8217;s a little Vim function that that toggles my Pry statement.  If the current line matches the Pry snipped, the line&#8217;s deleted.  If the current line doesn&#8217;t match the snippet, then the snippet is added at the cursor.  ( It&#8217;s best used on a blank line until I make the function more robust. )</p>

<script src="https://gist.github.com/zph/4980163.js"></script>

<p>Special thanks go to <a href="http://twitter.com/banisterfiend">@Banisterfiend</a> for all his hard work on the Pry gem.  It makes my Ruby life a much happier experience.  If you&#8217;ve benefited from his hard work, please consider a donation @ the following <a href="http://pryrepl.org/"> link </a>.</p>

<p>Also, special thanks to <a href="http://www.twitter/tpope">Tim Pope</a>.  Reading his vim-fugitive code gave me the syntax hint on how to make this work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Marked.app Work with Vim]]></title>
    <link href="http://zph.github.io/2013/02/making-marked-app-work-with-vim/"/>
    <updated>2013-02-18T00:00:00-05:00</updated>
    <id>http://zph.github.io/2013/02/making-marked-app-work-with-vim</id>
    <content type="html"><![CDATA[<p>I found the delightful &#8217;<a href="http://markedapp.com/"> Marked.app </a>&#8217; for OSX recently.  It takes any Markdown file and parses it using a few standard Markdown interpreters, displaying a live view of the text as html.</p>

<p>Of course I wanted to use it everywhere.  And by everywhere, I mean in Vim.  And by that I mean <a href="http://www.twitter.com/jeg2">@JEG2</a> posted the idea on Twitter:</p>

<blockquote class="twitter-tweet"><p>Open an Emacs file in Marked.app:<a href="https://t.co/2JBfev25" title="https://github.com/JEG2/dotfiles/blob/master/emacs.d/packages.el#L121">github.com/JEG2/dotfiles/…</a></p>&mdash; James Edward Gray II (@JEG2) <a href="https://twitter.com/JEG2/status/294607873370120192">January 25, 2013</a></blockquote>

<script async src="http://zph.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>And I ported it into a couple of lines in my .vimrc:</p>

<script src="https://gist.github.com/zph/4980402.js"></script>

<p>Enjoy seeing your markdown render while typing in a 30+ year old text editor =D.</p>
]]></content>
  </entry>
  
</feed>
